#!/bin/bash

# HamoniKR Chatbot Production Launcher
# This script is installed as /usr/bin/hamonikr-chatbot

set -e

# Configuration
VENV_NAME="hamonikr-chatbot-venv"
VENV_PATH="$HOME/.local/share/$VENV_NAME"
PKGDATA_DIR="@PKGDATA_DIR@"
LOCALEDIR="@LOCALE_DIR@"
VERSION="@VERSION@"

# Colors for output (only show if terminal)
if [[ -t 2 ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m'
else
    RED=''
    GREEN=''
    YELLOW=''
    NC=''
fi

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Check for conflicting user packages
has_conflicts() {
    # Check if user has OpenAI packages that might conflict
    if pip3 list --user 2>/dev/null | grep -E "^openai |^httpx |^anyio " >/dev/null 2>&1; then
        return 0  # has conflicts
    fi
    return 1  # no conflicts
}

# Check if system OpenAI is compatible
system_openai_compatible() {
    local openai_version
    if openai_version=$(python3 -c "import openai; print(openai.__version__)" 2>/dev/null); then
        # Simple version check - should be 1.12.x or 1.13.x etc, but not 2.x
        if [[ "$openai_version" =~ ^1\.[0-9]+\.[0-9]+$ ]]; then
            local major_minor=$(echo "$openai_version" | cut -d. -f1,2)
            if python3 -c "
major, minor = map(int, '$major_minor'.split('.'))
# Compatible if 1.12 <= version < 2.0
compatible = (major == 1 and minor >= 12)
exit(0 if compatible else 1)
" 2>/dev/null; then
                return 0  # compatible
            fi
        fi
    fi
    return 1  # not compatible
}

# Setup virtual environment
setup_venv() {
    print_status "Setting up virtual environment for HamoniKR Chatbot..."
    
    # Create venv directory if it doesn't exist
    mkdir -p "$(dirname "$VENV_PATH")"
    
    # Remove existing venv if present
    [[ -d "$VENV_PATH" ]] && rm -rf "$VENV_PATH"
    
    # Create venv with system site packages (for GTK access)
    python3 -m venv --system-site-packages "$VENV_PATH" >/dev/null 2>&1
    
    # Activate and install packages
    source "$VENV_PATH/bin/activate"
    pip install --quiet --upgrade pip
    pip install --quiet "openai>=1.12.0,<2.0.0" requests tqdm pillow babel packaging
    
    print_status "Virtual environment ready"
}

# Check if virtual environment is valid
venv_valid() {
    [[ -d "$VENV_PATH" ]] || return 1
    
    source "$VENV_PATH/bin/activate" 2>/dev/null || return 1
    
    python -c "
import openai
version = openai.__version__
major, minor = map(int, version.split('.')[:2])
assert major == 1 and minor >= 12, f'OpenAI version {version} not compatible'
" 2>/dev/null || return 1
    
    return 0
}

# Determine best Python environment
setup_environment() {
    local use_venv=false
    
    # Use venv if there are conflicts
    if has_conflicts; then
        print_warning "Found conflicting user packages, using virtual environment"
        use_venv=true
    # Use venv if system OpenAI is not compatible
    elif ! system_openai_compatible; then
        print_warning "System OpenAI version not compatible, using virtual environment"
        use_venv=true
    fi
    
    if [[ "$use_venv" == "true" ]]; then
        if ! venv_valid; then
            setup_venv
        fi
        source "$VENV_PATH/bin/activate"
    fi
}

# Run the application
run_application() {
    # Set environment
    export PYTHONPATH="$PKGDATA_DIR:${PYTHONPATH:-}"
    
    # Try to run the application
    python3 << 'EOF'
import os
import sys
import signal
import locale
import gettext

VERSION = os.environ.get('VERSION', '@VERSION@')
pkgdatadir = os.environ.get('PKGDATA_DIR', '@PKGDATA_DIR@')
localedir = os.environ.get('LOCALE_DIR', '@LOCALE_DIR@')

sys.path.insert(1, pkgdatadir)
signal.signal(signal.SIGINT, signal.SIG_DFL)
locale.bindtextdomain('hamonikr-chatbot', localedir)
locale.textdomain('hamonikr-chatbot')
gettext.install('hamonikr-chatbot', localedir)

if __name__ == '__main__':
    import gi

    from gi.repository import Gio
    gresource_path = os.path.join(pkgdatadir, 'hamonikr-chatbot.gresource')
    if os.path.exists(gresource_path):
        resource = Gio.Resource.load(gresource_path)
        resource._register()

    from hamonikr_chatbot import main
    sys.exit(main.main(VERSION))
EOF
}

# Main execution
main() {
    # Export variables for Python script
    export VERSION="$VERSION"
    export PKGDATA_DIR="$PKGDATA_DIR"
    export LOCALE_DIR="$LOCALEDIR"
    
    # Setup environment
    setup_environment >/dev/null 2>&1
    
    # Run application
    run_application "$@"
}

# Cleanup on exit
cleanup() {
    if command -v deactivate >/dev/null 2>&1; then
        deactivate 2>/dev/null || true
    fi
}
trap cleanup EXIT

# Run
main "$@"